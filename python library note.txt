파이썬 라이브러리 메모.
: python for coding test 에서 만든 코드들은 일단은 깃허브가 개인 저장소에 따로 보관. 
나중엔 팀 노트로 만들어둘것

0. sys (빠른 입력 받기, recursion limit 늘리기)
import sys

0-1. 빠른 입력
sys.stdin.readline()
sys.stdin.readline().split()
sys.stdin.readline().strip().split()

0-2. recursion limit 확인, 늘리기
sys.getrecursionlimit() #기본은 1000 인듯. 채점서버마다 다를 수 있음.
sys.setrecursionlimit(50*50) #2500까지 재귀 가능
그러나 setrecursionlimit()을 해줬다 하더라도 너무 큰 수인경우 채점서버에서 그만큼 지원하지 않으면 (Segmentation fault) 오류
이럴때는 recursion을 사용하지 않는 방법으로 풀어줘야함. 예) DFS -> BFS


1. stack (스택)
별도의 라이브러리 없음
stack = []
stack.append()
stack.pop()

1-1. len(stack)이 필요한 경우나 peer 연산 (스택 최상단의 값만 보기) 필요한 경우
stack = []
top = -1

peer : stack[top] 
len(stack) == top+1


2. queue (큐, 양방향 큐)
from collections import deque

2-1. 일반적인 큐
Q = deque()
Q.append()
Q.popleft()

2-2. 양방향 큐
Q = deque()
Q.append()
Q.popleft()
Q.appendleft()
Q.pop()

큐를 stack처럼 직접 구현할 경우 Q.pop(0) 연산은 O(n)임에 주의, 
따라서 stack의 top 변수처럼 front와 rear 변수를 선언해서 구현할 것.
큐의 max가 있을 때 (front+1)%max 처럼 활용.
단 Q empty와 Q full을 구분 위해서는 max +1을 해줘야 한다.


3. math (수학, 루트)
import math

3-1. 루트
math.sqrt(num)
또는 num**(1/2)

3-2. 반올림, 올림, 내림
round(3.1415) -> 3
round(3.1415, 2) -> 3.14
round(345.14, -1) -> 340

math.ceil(3.14) -> 4
math.floor(3.14) -> 3


4. heapq (우선순위 큐, 최소힙, 최대힙)
# 기본적으로 push 할때 (a,b)로 푸쉬를 하면 앞의 것 (a) 를 기준으로 "최소 힙"으로 구현한다.
# 만약 최대 힙으로 이용하고 싶으면, 푸쉬할 때 -를 붙여서 push 한 후, pop 할때 다시 -를 붙여주면 된다.

import heapq

q = []
heapq.heappush(q, (0, start))
rank, val = heapq.heappop(q)


AA. 그외 유용한 것
0. call by value, call by reference
파이썬에서 함수에서 인자로
0-1. call by value : +변수, -튜플, -문자열
0-2. call by reference (새로운 것 할당 말고, 객체를 직접 바꿔주는 경우): +리스트, +딕셔너리, +집합
예)
def changeValTest_1(arr: list):
    arr = [21,32,31] => 원본 안 바뀜 (함수 내의 arr은 새로운 객체를 가리키게 됨)
def changeValTest_2(arr: list):
    arr.append(10) => 원본 바뀜
    arr[0] = 10 => 원본 바뀜


1. 리스트 원소 for문 없이 출력 -> print(*lst)
lst = [1,2,3,4,5]
print(*lst)  <=>  print(1,2,3,4,5)
-> 1 2 3 4 5


2. 문자열 원소들 사이에 (띄어쓰기) 넣기 -> " ".join(st)
st = "ABC"
print(" ".join(st))

다른걸 넣고 싶으면 " " 자리에 다른것 적기


3. 리스트 복사
lst1 = [1,2,3]
lst2 = lst1  (둘이 같은 것을 가리키고 있어서, 어느 한 리스트의 값만 바꿔도 같이 바뀜)
lst2 = lst1[:]  (값들을 그대로 복사해서 별도의 리스트 만듦)

3-1. 2차원 리스트인 경우 (라이브러리 copy)
lst1 = [[1,1], [2,2]]
lst2 = lst[:] (겉에는 다른거지만 안에 리스트들은 같은 것을 가리키고 있음)
해결법 : 
import copy
lst2 = copy.deepcopy(lst1)
아니면 모든 리스트의 크기를 아는경우, 그만큼 반복문으로 일일이 복사해오는 방법도 있다.


4. lambda 사용법
선언 : lambda input값1, input값2, ...: (return값1, return값2, ...)
사용 : (lambda ~~)(인수1, 인수2, ...)

(선언시, input이 여러개여도 괄호 X, output은 여러개이면 괄호 필수)
(사용법은 반드시 lambda선언 전체를 감싸고, 그뒤에 괄호로 인자들을 전달)

예) arr = [(lambda x,y: (x**2, y**3, x))(i, i) for i in range(4)]
예2) print(list(map(lambda x: (x ** 2), range(5))))


5. sort, sorted 사용법
lst = [3,5,2,4,1]

예) lst.sort()  -> lst 자체가 정렬됨.
예) arr = sorted(lst)  -> lst는 냅두고 lst가 정렬된 값을 arr에 저장.

5-1. sort reverse
lst.sort(reverse=True) -> lst 정렬하되 내림차순으로 정렬함.

5-2. sort key (정렬의 조건을 주는것)
lst = [ [1,0], [3,5], [10,1], [5, -1] ]
lst.sort(key = lambda x: (x[1],x[0]))  -> lst를 정렬하되 우선 x[1] 조건으로 정렬하고, 같은 x[1]에 대해선 x[0]으로 정렬

예시)
lst = [ [6,2], [3,5], [10,1], [5, 1] ]
lst.sort(key = lambda x: (x[1]))
print(lst)
# [[10, 1], [5, 1], [6, 2], [3, 5]]

lst = [ [6,2], [3,5], [10,1], [5, 1] ]
lst.sort(key = lambda x: (x[1],x[0]))
print(lst)
# [[5, 1], [10, 1], [6, 2], [3, 5]]

lst = [ [6,2], [3,5], [10,1], [5, 1] ]
lst.sort(key = lambda x: (x[0]))
print(lst)
# [[3, 5], [5, 1], [6, 2], [10, 1]]


6. for 문, while 문에 else: 붙이기
for i in range(10):
    if i == num:
        break
else: print("엘스 실행")

=> for 또는 while 반복문에, else문을 달아놓을 경우,
break, return 등으로 끝나지 않고 반복이 끝까지 돌아 종료하는 경우 else문 실행한다.
위의 코드에서 num이 0~9인 경우 break 되어 else 문이 실행되지 않지만,
num이 그외의 숫자 (15 등)인 경우 for문 종료직후 else 문이 실행된다.
